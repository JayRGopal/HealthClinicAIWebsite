// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BlogPost {
  id        String   @id @default(cuid())
  title     String
  author    String
  tagline   String
  content   String
  mainImage String
  imageUrls String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/**
 * export type Patient = {
 * name: string;
 * insurer: string;
 * };
 * export type PatientEvent = {
 * date: string;
 * type: string;
 * content?: string;
 * transcript?: string;
 * summary?: string;
 * };
 */

model Patient {
  id           String      @id @default(cuid())
  patientId   String      @default("missing_patient_id") // default to a sentinel value
  name         String      @default("patient_name")
  name_iv      String? // now nullable (defaults to NULL)
  name_tag     String? // likewise
  dob          DateTime    @default(dbgenerated("'''1900-01-01T00:00:00.000Z'''")) // default to a sentinel value
  address      String? // nullable
  address_iv   String? // nullable
  address_tag  String? // nullable
  sex          String? // nullable
  sex_iv       String? // nullable
  sex_tag      String? // nullable
  insurances   Insurance[] // relation to multiple Insurance records
  insurer_iv   String[] // array, one for each insurance
  insurer_tag  String[] // array, one for each insurance
  encounters   Encounter[]
  serviceStart DateTime    @default(dbgenerated("'''1900-01-01T00:00:00.000Z'''")) // default to a sentinel value
  serviceEnd   DateTime?

  zipCode     String? // already nullable
  zipCode_iv  String? // already nullable
  zipCode_tag String? // already nullable
  groupNumber String? // already nullable

  billerId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Insurance {
  id                 String    @id @default(cuid())
  name               String
  insuranceType      String
  insurancePlan      String
  insuranceStartDate DateTime  @default(now())
  insuranceEndDate   DateTime?
  patientId          String?
  Patient            Patient?  @relation(fields: [patientId], references: [id])
}

model Physician {
  id           String   @id @default(cuid())
  name         String
  physicianNPI String   @default("missing_npi") // default to a sentinel value
  opn          String? // optional, can be null
  address      String?
  phone        String?
  email        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Add a relation to the encounter model
  encounters Encounter[]
}

model Facility {
  id          String  @id @default(cuid())
  name        String
  address     String @default("missing_address") // default to a sentinel value
  city        String @default("missing_city") // default to a sentinel value
  state       String @default("missing_state") // default to a sentinel value
  zipCode     String @default("missing_zip") // default to a sentinel value
  facilityNPI String? // already present

  taxId String?
  phone String?
  fax   String?
  email String?

  billingAddressLine1 String?
  billingAddressLine2 String?
  billingCity         String?
  billingState        String?
  billingZipCode      String?
  billingContactName  String?
  billingContactPhone String?
  billingContactEmail String?

  facilityType           String // or enum
  placeOfServiceCode     String?
  taxonomyCodes          String[]  @default([])
  ccn                    String?
  ptan                   String?
  cliaNumber             String?
  licenseNumber          String?
  licenseState           String?
  acceptAssignment       Boolean?
  medicareEnrollmentDate DateTime?
  medicaidEnrollmentDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  encounters Encounter[]
}

model Encounter {
  id            String   @id @default(cuid())
  patientId     String
  physicianId   String
  dateOfService DateTime
  content       String?
  summary       String?

  facilityName String? // already nullable

  appointmentType String @default("Select") 
  placeOfService  String?
  // Add an array of file urls
  fileUrls        String[]
  status          String   @default("Pending") // default to "PENDING"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Add a relation to the Patient model
  patient    Patient        @relation(fields: [patientId], references: [id])
  physician  Physician      @relation(fields: [physicianId], references: [id])
  actions    billerAction[]
  Facility   Facility?      @relation(fields: [facilityId], references: [id])
  facilityId String?
}

enum Action {
  ELIBIGIBILITY_AND_BENEFITS
  APPEALS
  CLAIM_STATUS_INQUIRIES
  DENIALS
}

model billerAction {
  id          String   @id @default(cuid())
  encounterId String
  date        DateTime
  type        Action
  content     String?
  transcript  String?
  summary     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Add an array of file urls
  fileUrls    String[]

  encounter Encounter @relation(fields: [encounterId], references: [id])
}

